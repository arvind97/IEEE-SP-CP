7:30 PM <mohitreddy1996> we will wait for 5 more minutes and then continue
7:30 PM <ABHISHEKs> .
7:30 PM <mohitreddy1996> *start
7:30 PM <mohitreddy1996> any doubts so far?
7:31 PM <mohitreddy1996> i am sort of free today, so lets have an interactive session, with good questions discussion.
7:31 PM → abhi_ joined (673951c1@gateway/web/freenode/ip.103.57.81.193)
7:32 PM <Tushaar> I didn't understand, what to do, if the array is odd-sized, while performing merge-sort.
7:32 PM ⇐ gautham_ quit (673c44da@gateway/web/freenode/ip.103.60.68.218) Ping timeout: 250 seconds
7:32 PM <mohitreddy1996> okay say the size if 5
7:32 PM <mohitreddy1996> the array is 3 ,2, 5, 6, 1
7:32 PM → Mihir and shamitha joined  
7:33 PM <Tushaar> Yeah!
7:33 PM <mohitreddy1996> so we can divide it as 
7:33 PM <mohitreddy1996> 3,2 and 5,6,1
7:33 PM <mohitreddy1996> or 3,2,5 and 6,1
7:33 PM → gautham_ joined (673c44da@gateway/web/freenode/ip.103.60.68.218)
7:34 PM <Tushaar> Cool!
7:34 PM <mohitreddy1996> if you see the code you will understand that division doesn't matter
7:34 PM <mohitreddy1996> so after that in 3,2 you split it, and check
7:34 PM <mohitreddy1996> it becomes 
7:34 PM <mohitreddy1996> 2,3
7:34 PM <mohitreddy1996> and then 5,6,1
7:34 PM <mohitreddy1996> can be again split as 5 and 6,1
7:34 PM <mohitreddy1996> 5 will stay as itis
7:34 PM <mohitreddy1996> then check 6,1 and divide, and merge
7:34 PM <mohitreddy1996> it becomes 1,6
7:35 PM <mohitreddy1996> then you have 5 and 1,6 on the RHS
7:35 PM <mohitreddy1996> you try to merge them
7:35 PM <mohitreddy1996> compare 1 and 5
7:35 PM <mohitreddy1996> 1 is smaller so pick it up and put
7:35 PM <mohitreddy1996> 1,5,6
7:35 PM <mohitreddy1996> now we have 2 sorted subarraus
7:35 PM <mohitreddy1996> 2,3 and 1,5,6
7:35 PM <mohitreddy1996> again merge operation on them
7:35 PM <mohitreddy1996> 1,2,3,5,6
7:35 PM → kapilvshst joined (75f1919d@gateway/web/freenode/ip.117.241.145.157)
7:36 PM <Tushaar> And, for time complexity; T(n) = 2*(n/2) + n; how do we get '+ n'?
7:36 PM <mohitreddy1996> 2*T(n/2) + n
7:36 PM <mohitreddy1996> don't forget T
7:36 PM <Tushaar> Yeah, that. 
7:36 PM <mohitreddy1996> it is recursively being called rit?
7:36 PM <Tushaar> Oh okay. 
7:37 PM <mohitreddy1996> +n why? because while merging you are comparing elements of the sub arrays you are merging
7:37 PM → dhaval joined (75e5189d@gateway/web/freenode/ip.117.229.24.157)
7:37 PM <mohitreddy1996> got it?
7:37 PM <Tushaar> Yeah.
7:37 PM <Tushaar> Thanks.
7:38 PM <mohitreddy1996> cool ;)
7:38 PM → sandeepmenon joined (~sandukutt@60.243.149.23)
7:38 PM <mohitreddy1996> any other doubts? 
7:38 PM <mohitreddy1996> Okay so lets start the session.
7:39 PM <mohitreddy1996> STL data structures are really important
7:39 PM <mohitreddy1996> If you check any top coder's codes , you will find STL Data structures being used.
7:39 PM <mohitreddy1996> why?
7:39 PM <mohitreddy1996> it will make your code smaller
7:40 PM <mohitreddy1996> and they are in the most optimized way
7:40 PM <mohitreddy1996> say you may implement maps or pairs using C/C++ but maps and pairs used in STL are the well optimised.
7:41 PM <mohitreddy1996> your codes may not be the best..
7:41 PM <mohitreddy1996> Okay so lets start.
7:41 PM <mohitreddy1996> 1) very important :  vectors
7:41 PM <mohitreddy1996> vectors are basically like arrays itself
7:41 PM <mohitreddy1996> so why vectors?
7:42 PM <mohitreddy1996> here is the deal, say you have to create an 2D array, with max X coordinate 10^6 and max Y coordinate 10^6
7:42 PM <mohitreddy1996> so we create an array A[10^6][10^6]
7:42 PM <mohitreddy1996> segmentation fault in compiler :P
7:42 PM → DVG joined (0ec2b944@gateway/web/freenode/ip.14.194.185.68)
7:43 PM <mohitreddy1996> vectors will help here.
7:43 PM <mohitreddy1996> because you actually never create a memory space of 10^6 * 10^6
7:43 PM <mohitreddy1996> so basic operation of vectors : 
7:43 PM → varsh joined (0e63dc23@gateway/web/freenode/ip.14.99.220.35)
7:43 PM <mohitreddy1996> no wait, how are they declared and initialised
7:43 PM <mohitreddy1996> vector<int> v;
7:43 PM <mohitreddy1996> vector<data_type> v;
7:44 PM <mohitreddy1996> and say you want to create a 2D vector
7:44 PM <mohitreddy1996> vector<data_type> v[size_X];
7:44 PM <mohitreddy1996> how do we add elements to it?>
7:44 PM <mohitreddy1996> v.push_back(x)
7:45 PM <mohitreddy1996> push_back puts the element in the end.
7:45 PM <mohitreddy1996> you can insert in between at any place too. but you will actually never do that in CP.
7:45 PM <mohitreddy1996> how do we know how many elements are inside vector
7:45 PM <mohitreddy1996> v.size()
7:46 PM <mohitreddy1996> we can use index to access vectors too.
7:46 PM → siddharth joined  ⇐ dhaval quit  
7:46 PM <mohitreddy1996> say we do
7:46 PM <mohitreddy1996> for(i=0;i<5;i++)
7:46 PM <mohitreddy1996> {
7:46 PM <mohitreddy1996>  v.push_back(i);
7:46 PM <mohitreddy1996> }
7:46 PM <mohitreddy1996> how to access them?
7:46 PM <mohitreddy1996> v[i]
7:46 PM <mohitreddy1996> or we can use iterators too.
7:47 PM <mohitreddy1996> vector<int> :: iterator it;
7:47 PM <mohitreddy1996> it = v.begin(); it!=v.end();it++
7:47 PM <mohitreddy1996> to access element at iterator it -> *it
7:47 PM ⇐ ABHISHEKs quit (75f695ac@gateway/web/freenode/ip.117.246.149.172) Ping timeout: 250 seconds
7:47 PM <mohitreddy1996> iterator as anand told you other day dynamic pointer
7:48 PM <mohitreddy1996> similarly there are different methods to remove, delete, resize, etc which are never used.
7:48 PM <mohitreddy1996> One most important thing : never use STL anywhere, you will get 0 :P
7:48 PM <mohitreddy1996> in academics
7:49 PM <sandeepmenon> true that =D
7:49 PM <mohitreddy1996> lets solve a question now using just STL
7:49 PM <mohitreddy1996> say we have to insert elements : 3,4,1,2,5 and sort them
7:50 PM → abhi__ joined  ↔ abcd popped in  
7:50 PM <mohitreddy1996> http://collabedit.com/mrg56
7:50 PM <mohitreddy1996> switch over here
7:50 PM <mohitreddy1996> we will write codes there: P
7:50 PM → Noobie_ joined  ⇐ abhi_ quit  
7:51 PM <mohitreddy1996> everyone join there. and once you do ping here.
